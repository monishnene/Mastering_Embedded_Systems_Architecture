/* prototypes for doRED, doYellow, doGreen */
typedef enum {
RED,
YELLOW,
GREEN
} tstate_t;

int16_t add(int16_t x, int16_t y){ return x+y;}
int16_t sub(int16_t x, int16_t y){ return x-y;}
int16_t multiply(int16_t x, int16_t y){ return x*y;}
int16_t divide(int16_t x, int16_t y){
if (y) {return x/y;) // Cannot divide by zero
else {return 0;)
}

int16_t (*op[4])(int16_t x, int16_t y) = {add, subtract, multiply, divide};
int main(){
int16_t x, y, z, operation;
printf("Enter Two Numbers and an operation number");
printf(" (0)+ (1)- (2)* (3)\\ : ");
scanf("%hd %hd %hd", &x, &y, &operation);
if (operation <= 3 && operation >= 0){
z = (*op[operation])(x, y);
printf("result = %d\n", z);
}
else {
printf("Operation not supported");
};
return 0;
}



void (*state_fun[3]()) = {doRed, doYellow, doGreen};
typedef enum {RED, YELLOW, GREEN} tstate_t;
typedef enum {GO, STOP, TIMEOUT} tevent_t;
void (* current_fun)();
tstate_t stateTransition[3][3] =
{ {GREEN, RED, RED} ,
{RED, YELLOW, RED} ,
{GREEN, YELLOW, GREEN} };
tstate_t state = RED;
tevent_t event = STOP;
doRED();
while (1) {
/* wait for event and then set event variable */
…
if (event <= 3) {
state = stateTransition[state][event];
current_fun = state_fun[state];
current_fun();
};
};